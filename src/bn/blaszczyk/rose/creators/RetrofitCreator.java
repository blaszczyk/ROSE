package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.List;

import bn.blaszczyk.rose.*;
import bn.blaszczyk.rose.model.*;

public class RetrofitCreator
{
	public static void create(final List<EntityModel> entities, final MetaData metadata, final String parentDir) throws RoseException
	{
		final String fullpath = parentDir + "/" + metadata.getSrcpath() + metadata.getRetrofitpackage().replaceAll("\\.", "/") + "/" + metadata.getRetrofitname() + ".java";
		final File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(final Writer writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\r\n * " + metadata.getRetrofitname() + ".java\r\n * generated by rose\r\n */\r\n");
			
			// package declaration
			writer.write("package " + metadata.getRetrofitpackage() + ";\r\n\r\n"
					+ "import retrofit2.http.*;\r\n"
					+ "import java.util.List;\r\n"
					+ "import retrofit2.Call;\r\n\r\n"
					+ "public interface " + metadata.getRetrofitname() + "\r\n"
					+ "{\r\n");
			
			for(final EntityModel entity : entities)
				writeEntityMethods(entity, writer);

			writer.write("}\r\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			throw new RoseException("error creating retrofit interface", e);
		}
	}

	private static void writeEntityMethods(final EntityModel entity, final Writer writer) throws IOException
	{
		writer.write("\t@GET(\"" + entity.getObjectName().toLowerCase() + "\")\r\n"
				+ "\tpublic Call<List<" + entity.getClassName() + "Dto>> get" + entity.getSimpleClassName() + "s();\r\n\r\n");
		writer.write("\t@GET(\"" + entity.getObjectName().toLowerCase() + "/{id}\")\r\n"
				+ "\tpublic Call<List<" + entity.getClassName() + "Dto>> get" + entity.getSimpleClassName() + "ById(@Path(\"id\") final int id);\r\n\r\n");
		writer.write("\t@GET(\"" + entity.getObjectName().toLowerCase() + "/{ids}\")\r\n"
				+ "\tpublic Call<List<" + entity.getClassName() + "Dto>> get" + entity.getSimpleClassName() + "sByIds(@Path(\"ids\") final int[] ids);\r\n\r\n");
		writer.write("\t@GET(\"" + entity.getObjectName().toLowerCase() + "/id\")\r\n"
				+ "\tpublic Call<List<Integer>> get" + entity.getSimpleClassName() + "Ids();\r\n\r\n");
		writer.write("\t@GET(\"" + entity.getObjectName().toLowerCase() + "/count\")\r\n"
				+ "\tpublic Call<Integer> get" + entity.getSimpleClassName() + "Count();\r\n\r\n");
		writer.write("\t@POST(\"" + entity.getObjectName().toLowerCase() + "\")\r\n"
				+ "\tpublic Call<" + entity.getClassName() + "Dto> post" + entity.getSimpleClassName() + "(@Body " + entity.getClassName() + "Dto dto);\r\n\r\n");
		writer.write("\t@PUT(\"" + entity.getObjectName().toLowerCase() + "\")\r\n"
				+ "\tpublic Call<?> put" + entity.getSimpleClassName() + "(@Body " + entity.getClassName() + "Dto dto);\r\n\r\n");
		writer.write("\t@DELETE(\"" + entity.getObjectName().toLowerCase() + "/{id}\")\r\n"
				+ "\tpublic Call<?> delete" + entity.getSimpleClassName() + "ById(@Path(\"id\") final int id);\r\n\r\n\r\n");
	}

}
