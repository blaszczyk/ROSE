package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import bn.blaszczyk.rose.MetaData;
import bn.blaszczyk.rose.RoseException;
import bn.blaszczyk.rose.model.*;

public class JavaParserCreator {
	
	public static final String PARSE_METHOD = "parseField";
	
	public static String getParserName(EntityModel entity, MetaData metadata)
	{
		return String.format(metadata.getParserformat(), entity.getSimpleClassName());
	}
	
	public static void create(final EntityModel entityModel, final MetaData metadata, final String parentDir) throws RoseException
	{
		final String classname = getParserName(entityModel, metadata);
		final String fullpath = parentDir + "/" + metadata.getSrcpath() + metadata.getParserpackage().replaceAll("\\.", "/") + "/" + classname + ".java";
		final File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(final FileWriter writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\r\n * " + classname + ".java\r\n * generated by rose\r\n */\r\n");
			
			// package declaration
			writer.write("package " + metadata.getParserpackage() + ";\r\n\r\n");
			
			// class declaration
			writer.write("public class " + classname + "\r\n"
					+ "{\r\n");
			
			// parseField
			writer.write("\tpublic static void " + PARSE_METHOD + "( " + entityModel.getClassName() + " " + entityModel.getObjectName() 
						+ ", String name, String value ) throws java.text.ParseException\r\n"
						+ "\t{\r\n" );
			writer.write("\t\tswitch( name.toLowerCase() )\r\n"
					+ "\t\t{\r\n");
			for(Field field : entityModel.getFields())
				if( field instanceof PrimitiveField)
				{
					PrimitiveField primitiveField = (PrimitiveField) field;
					writer.write("\t\tcase \"" + primitiveField.getName().toLowerCase() + "\":\r\n"
							+ "\t\t\t" + entityModel.getObjectName() + "." + JavaModelCreator.getSetterName(primitiveField) + "( " );
					switch(primitiveField.getType())
					{
					case VARCHAR:
					case CHAR:
						writer.write( "value" );
						break;
					case INT:
						writer.write( "Integer.parseInt( value )" );
						break;
					case DATE:
						writer.write( "java.text.DateFormat.getDateInstance().parse( value )" );
						break;
					case NUMERIC:
						writer.write( "new java.math.BigDecimal( value )" );
						break;
					case BOOLEAN:
						writer.write( "Boolean.parseBoolean( value )" ) ;
					}	
					writer.write( " );\r\n\t\t\tbreak;\r\n" );
				}		
			writer.write("\t\tdefault:\r\n"
					+ "\t\t\tSystem.out.println( \"Unknown Primitive Field: \" + name + \" in " + entityModel.getSimpleClassName() + "\");\r\n"
					+ "\t\t}\r\n"
					+ "\t}\r\n"
					+ "}\r\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			throw new RoseException("error creating java parser", e);
		}
		
	}
	
	
}
