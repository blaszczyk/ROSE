package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import bn.blaszczyk.rose.MetaData;
import bn.blaszczyk.rose.model.Entity;
import bn.blaszczyk.rose.model.Member;
import bn.blaszczyk.rose.model.MemberType;

public class JavaParserCreator {
	
	public static void create(Entity entity, MetaData metadata)
	{
		String classname = entity.getClassname() + "Parser";
		String fullpath = metadata.getSrcpath() + metadata.getModelpackage().replaceAll("\\.", "/") + "/" + classname + ".java";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\n * " + classname + ".java\n * generated by rose\n */\n\n");
			
			// package declaration
			writer.write("package " + metadata.getModelpackage() + ";\n\n");
			
			// imports
			if(entity.getImports().contains(MemberType.DATE.getJavapackage()))
				writer.write("import java.text.DateFormat;\n");
			if(entity.getImports().contains(MemberType.NUMERIC.getJavapackage()))
				writer.write("import " + MemberType.NUMERIC.getJavapackage() + ";\n");
			
			// class declaration
			writer.write("\npublic class " + classname + "\n{\n");
			
			// viewn object
			writer.write("\tpublic static void parseProperty( " + entity.getClassname() + " " + entity.getJavaname() + ", String property, String value )\n\t{\n" );
			writer.write("\t\tswitch( property.toLowerCase() )\n\t\t{\n");
			for(Member member : entity.getMembers())
			{
				writer.write("\t\tcase \"" + member.getName().toLowerCase() + "\":\n\t\t\t" + entity.getJavaname() + ".set" + member.getCapitalName() + "( " );
				switch(member.getType())
				{
				case VARCHAR:
				case CHAR:
					writer.write( "value" );
					break;
				case INT:
					writer.write( "Integer.parseInt( value )" );
					break;
				case DATE:
					writer.write( "DateFormat.getDateInstance().parse( value )" );
					break;
				case NUMERIC:
					writer.write( "new BigDecimal( value )" );
					break;
				case BOOLEAN:
					writer.write( "Boolean.parseBoolean( value )" ) ;
				}
				writer.write( " );\n\t\t\tbreak;\n" );
			}			
			writer.write("\t\tdefault:\n\t\t\tSystem.out.println( \"Unknown Property: \" + property + \" in " + entity.getClassname() + "\");\n" );
			writer.write("\t\t}\n\t}\n}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
	}
	
	
}
