package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.List;

import bn.blaszczyk.rose.*;
import bn.blaszczyk.rose.model.*;

import static bn.blaszczyk.rose.creators.JavaModelCreator.getGetterName;
import static bn.blaszczyk.rose.creators.JavaModelCreator.getSetterName;

public class JavaInterfaceCreator 
{
	
	/*
	 * create Entity
	 */
	public static void create(final EntityModel entityModel, final MetaData metadata, final String parentDir) throws RoseException
	{
		final String fullpath = getFullPath(entityModel, metadata, parentDir);
		final File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(final Writer writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\r\n * " + entityModel.getSimpleClassName() + ".java\r\n * generated by rose\r\n */\r\n");
			
			// package declaration
			writer.write("package " + metadata.getModelpackage() + ";\r\n\r\n");
			
			writeClassDeclaration(entityModel, metadata.isUsingTimestamp(), writer);			
			
			writer.write("{\r\n");
			
			writeConstants(entityModel.getEntityFields(), writer);

			writeGettersSetters(entityModel, writer);

			writer.write("}\r\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			throw new RoseException("error creating java interfaces", e);
		}
	}

	private static String getFullPath(final EntityModel entityModel, final MetaData metadata, final String parentDir) {
		final String fullpath = parentDir + "/" + metadata.getSrcpath() + metadata.getModelpackage().replaceAll("\\.", "/") + "/" + entityModel.getSimpleClassName() + ".java";
		return fullpath;
	}

	private static void writeConstants(List<EntityField> entityFields, Writer writer) throws IOException
	{
		int count = 0;
		for(final EntityField field : entityFields)
			writer.write("\tpublic static final int " + field.getName().toUpperCase() + " = " + count++ + ";\r\n");
		writer.write("\r\n");
	}

	private static void writeClassDeclaration( EntityModel entity, boolean timestamped, Writer writer) throws IOException
	{
		writer.write("public interface " + entity.getSimpleClassName() );
		if(entity.getImplInterface() != ImplInterface.NONE)
		{
			writer.write( " extends bn.blaszczyk.rose.model." + entity.getImplInterface().getIdentifyer());
		}
		writer.write( "\r\n");
	}
	
	private static void writeGettersSetters(EntityModel entity, Writer writer) throws IOException
	{
		// primitive and enum Fields
		for(Field field : entity.getFields())
			if( field instanceof PrimitiveField)
				writePrimitiveGetterSetter((PrimitiveField) field, writer);
			else if( field instanceof EnumField )
				writeEnumGetterSetter((EnumField) field, writer);
		
		// entity Fields
		for(EntityField entityField : entity.getEntityFields())
			writeEntityGetterSetter(entityField, writer);
	}

	private static void writePrimitiveGetterSetter(PrimitiveField primitiveField, Writer writer) throws IOException
	{
		// getter
		writer.write("\tpublic " + primitiveField.getType().getJavaname() + " " + getGetterName(primitiveField) + "();\r\n");
		// setter
		writer.write("\tpublic void " + getSetterName(primitiveField) + "( " 
				+ primitiveField.getType().getJavaname() + " " + primitiveField.getName() + " );\r\n\r\n" );
	}

	private static void writeEnumGetterSetter(EnumField enumField, Writer writer) throws IOException
	{
		// getter
		writer.write("\tpublic " + enumField.getEnumType().getSimpleClassName() + " " + getGetterName(enumField) + "();\r\n");
	
		// setter
		writer.write("\tpublic void " + getSetterName(enumField) + "( " 
				+ enumField.getEnumType().getSimpleClassName() + " " + enumField.getName() + " );\r\n\r\n" );
	}

	private static void writeEntityGetterSetter(EntityField entityField, Writer writer) throws IOException
	{
		if(entityField.getType().isSecondMany())
			writeMultipleEntityGetterSetter(entityField, writer);
		else
			writeSingleEntityGetterSetter(entityField, writer);
	}

	private static void writeSingleEntityGetterSetter(EntityField entityField, Writer writer ) throws IOException
	{
		// getter
		writer.write("\tpublic " + entityField.getEntityModel().getSimpleClassName() + " " + getGetterName(entityField) + "();\r\n");
		
		// setter
		writer.write("\tpublic void " + getSetterName(entityField) + "( " 
				+ entityField.getEntityModel().getSimpleClassName() + " " 	+ entityField.getName() + " );\r\n\r\n" );
	}

	private static void writeMultipleEntityGetterSetter(EntityField entityField, Writer writer ) throws IOException
	{
		// getter
		writer.write("\tpublic java.util.Set<" + entityField.getEntityModel().getSimpleClassName() + "> " + getGetterName(entityField)	+ "();\r\n");
	
		// setter
		writer.write("\tpublic void " + getSetterName(entityField) + "( java.util.Set<" + entityField.getEntityModel().getSimpleClassName() + "> " + entityField.getName() + " );\r\n\r\n" );
	}

	public static void clear(final EntityModel entity, final MetaData metadata, final String parentDir)
	{
		final String fullPath = getFullPath(entity, metadata, parentDir);
		final File file = new File(fullPath);
		if(file.exists())
			file.delete();
	}
	
}
