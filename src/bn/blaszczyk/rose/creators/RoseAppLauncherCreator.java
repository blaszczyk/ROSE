package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.List;

import bn.blaszczyk.rose.MetaData;
import bn.blaszczyk.rose.model.Entity;
import bn.blaszczyk.rose.model.EnumField;
import bn.blaszczyk.rose.model.Field;
import bn.blaszczyk.rose.model.PrimitiveField;

public class RoseAppLauncherCreator {

	private static final String CONTROLLER_PACKAGE = "bn.blaszczyk.roseapp.controller";
	private static final String CONFIG_PACKAGE = "bn.blaszczyk.roseapp.config";
	private static final String TOOLS_PACKAGE = "bn.blaszczyk.roseapp.tools";

	public static void createMain(List<Entity> entities, MetaData metadata)
	{
		String classname = metadata.getMainname();
		String fullpath = metadata.getSrcpath() + metadata.getMainpackage().replaceAll("\\.", "/") + "/" + classname + ".java";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			final String allClassesAsCSV = getAllClassesAsCSVString(entities);
			
			// initial comment
			writer.write("/*\n * " + metadata.getMainname() + ".java\n * generated by rose\n */\n\n");
			
			// package declaration
			writer.write("package " + metadata.getMainpackage() + ";\n\n");
			
			// imports
			writer.write("import " + CONTROLLER_PACKAGE + ".*;\n"
					+ "import " + metadata.getModelpackage() + ".*;\n");
			if(!metadata.getMainpackage().equals(metadata.getInitiatorpackage()))
				writer.write("import " + metadata.getInitiatorpackage() + ".*;\n");
			
			// class declaration
			writer.write("\npublic class " + classname + "\n{\n\n");
			
			// main
			writer.write("\tpublic static void main(String[] args)\n"
					+ "\t{\n"
					+ "\t\t" + metadata.getInitiatorname() + ".initialize();\n"
					+ "\t\tModelController modelController = new " + "HibernateController();\n"
					+ "\t\tmodelController.loadEntities(new Class<?>[]{" + allClassesAsCSV + "});\n"
					+ "\t\tGUIController guiController = new GUIController(modelController);\n"
					+ "\t\tguiController.createMainFrame( new Class<?>[]{" + allClassesAsCSV + "}, \"" + metadata.getMainname() + "\" );\n"
					+ "\t}\n");
			
			//fin
			writer.write("}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public static void createInitializer(List<Entity> entities, MetaData metadata)
	{
		String classname = metadata.getInitiatorname();
		String fullpath = metadata.getSrcpath() + metadata.getInitiatorpackage().replaceAll("\\.", "/") + "/" + classname + ".java";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			final String allClassesAsCSV = getAllClassesAsCSVString(entities);
			
			// initial comment
			writer.write("/*\n * " + metadata.getInitiatorname() + ".java\n * generated by rose\n */\n\n");
			
			// package declaration
			writer.write("package " + metadata.getInitiatorpackage() + ";\n\n");
			
			// imports
			writer.write("import " + TOOLS_PACKAGE + ".*;\n"
					+ "import " + CONFIG_PACKAGE + ".*;\n"
					+ "import " + metadata.getModelpackage() + ".*;\n");
			
			// class declaration
			writer.write("\npublic class " + classname + "\n{\n\n");
			
			// main
			writer.write("\tpublic static void initialize()\n"
					+ "\t{\n"
					+ "\t\tModelProvider.parseRoseFile( " + classname + ".class.getClassLoader().getResourceAsStream(\"" 
						+ getRoseCopyFileName(metadata) + "\" ) );\n"
					+ "\t\tModelProvider.putClasses( " + allClassesAsCSV + ");\n");
			for(Entity entity : entities)
				writer.write("\n\t\tViewConfig.putColumnWidthsAsString( " + entity.getSimpleClassName() + ".class , \"" + generateColWidths(entity) + "\" );\n"
						+ "\t\tViewConfig.putColumnContentsAsString( " + entity.getSimpleClassName() + ".class, \"" + generateColContents(entity) + "\" );\n");
			writer.write("\t}\n");
			
			//fin
			writer.write("}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public static void copyRose(File file, MetaData metadata)
	{
		String copyName = metadata.getSrcpath() + getRoseCopyFileName(metadata);
		File copy = new File(copyName);
		try
		{
			copy.getParentFile().mkdirs();
			Files.copy(file.toPath(), copy.toPath(), StandardCopyOption.REPLACE_EXISTING);
			System.out.println("File created: " + copyName);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	private static String getRoseCopyFileName(MetaData metadata)
	{
		return metadata.getResourcepackage().replaceAll("\\.", "/") + "/" + metadata.getMainname() + ".rose";
	}
	
	private static String getAllClassesAsCSVString(List<Entity> entities)
	{
		boolean first = true;
		StringBuilder builder = new StringBuilder();
		for(Entity entity : entities)
		{
			if(first)
				first = false;
			else
				builder.append(", ");
			builder.append( entity.getSimpleClassName() + ".class");
		}
		return builder.toString();
		
	}
	
	private static String generateColContents(Entity entity)
	{
		boolean first = true;
		StringBuilder builder = new StringBuilder();
		for(Field field : entity.getFields())
		{
			if(first)
				first = false;
			else
				builder.append(";");
			builder.append( field.getName() );
		}
		return builder.toString();
	}

	private static String generateColWidths(Entity entity)
	{
		boolean first = true;
		StringBuilder builder = new StringBuilder();
		for(Field field : entity.getFields())
		{
			if(first)
				first = false;
			else
				builder.append(";");
			int width = 0;
			if(field instanceof EnumField)
				width = ((EnumField)field).getEnumName().length() * 2;
			else if(field instanceof PrimitiveField)
			{
				PrimitiveField pField = (PrimitiveField) field;
				switch(pField.getType())
				{
				case CHAR:
				case VARCHAR:
				case NUMERIC:
					width = pField.getLength1() * 2;
					break;
				case DATE:
				case BOOLEAN:
				case INT:
					width = 50;
					break;
				}
			}
			builder.append( width );
		}
		return builder.toString();
	}

	

}
