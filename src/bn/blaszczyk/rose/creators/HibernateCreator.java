package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.List;

import bn.blaszczyk.rose.MetaData;
import bn.blaszczyk.rose.model.DBType;
import bn.blaszczyk.rose.model.Entity;
import bn.blaszczyk.rose.model.EnumType;

public class HibernateCreator {

	private static final String XML_HEADER = "<?xml version=\"1.0\"?>\r\n"
			+ "<!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" "
			+ "\"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd\">\r\n"
			+ "<!--\r\nhibernate.cfg.xml\r\ngenerated by rose\r\n-->\r\n"
			+ "<hibernate-configuration>\r\n"
			+ "\t<session-factory>\r\n";
	
	private static final String XML_FOOTER = "\t</session-factory>\r\n</hibernate-configuration>";

	public static void create(List<Entity> entities, List<EnumType> enums, MetaData metadata)
	{
		DBType dbType = DBType.getType(metadata.getDbtype());
		String fullpath = metadata.getSrcpath() + "hibernate.cfg.xml";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			writer.write( XML_HEADER );
			writeProperty("hibernate.connection.url", "jdbc:" + dbType.getName() + "://" + metadata.getDbserver() 
							+ ":" + metadata.getDbport() + "/" + metadata.getDbname(), writer);
			writeProperty("hibernate.connection.username", metadata.getDbuser(), writer);
			writeProperty("hibernate.connection.driver_class", dbType.getJdbcDriver(), writer);
			writeProperty("hibernate.connection.password", metadata.getDbpassword(), writer);
			writeProperty("hibernate.dialect", dbType.getDialect(), writer);
			for(Entity entity : entities)
				writeEntity(entity, metadata, writer);
			writer.write( XML_FOOTER );
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	private static void writeProperty(String name, String value, Writer writer) throws IOException
	{
		writer.write("\t\t<property name=\"" + name + "\">" + value + "</property>\r\n");
	}

	private static void writeEntity(Entity entity, MetaData metadata, Writer writer) throws IOException
	{
		writer.write("\t\t<mapping class=\"" + metadata.getModelpackage() + "." + entity.getSimpleClassName() + "\"/>\r\n");
	}
	
}


