package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import bn.blaszczyk.rose.*;
import bn.blaszczyk.rose.model.*;


public class JavaModelCreator {

	public static String getGetterName(Field field)
	{
		if(field instanceof PrimitiveField && ((PrimitiveField)field).getType().equals(PrimitiveType.BOOLEAN))
			return "is" + field.getCapitalName();
		return "get" + field.getCapitalName();
	}
	
	public static String getSetterName(Field field)
	{
		return "set" + field.getCapitalName();
	}

	public static String getGetterName(EntityField entityField)
	{
		if(entityField.getType().isSecondMany())
			return "get" + entityField.getCapitalName() + "s";
		return "get" + entityField.getCapitalName();
	}
	
	public static String getSetterName(EntityField entityField)
	{
		if(entityField.getType().isSecondMany())
			return "set" + entityField.getCapitalName() + "s";
		return "set" + entityField.getCapitalName();
	}
	
	/*
	 * create Entity
	 */
	public static void create(Entity entity, MetaData metadata)
	{
		String fullpath = metadata.getSrcpath() + metadata.getModelpackage().replaceAll("\\.", "/") + "/" + entity.getSimpleClassName() + ".java";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\n * " + entity.getSimpleClassName() + ".java\n * generated by rose\n */\n\n");
			
			// package declaration
			writer.write("package " + metadata.getModelpackage() + ";\n\n");
			
			// imports
			if(metadata.isUsingAnnotations())
				writer.write("import javax.persistence.*;\n\n");
			
			// annotations
			if(metadata.isUsingAnnotations())
				writer.write("\n@Entity\n@Table(name=\"" + entity.getSimpleClassName() + "\")");
			
			// class declaration
			writer.write("\npublic class " + entity.getSimpleClassName() + " implements bn.blaszczyk.roseapp.model.Entity, Comparable<" + entity.getSimpleClassName() + ">\n{");
			
			// id
			writer.write("\n\tprivate int id = -1;\n");

			// primitive and enum fields
			for(Field field : entity.getFields())
				if( field instanceof PrimitiveField)
				{
					PrimitiveField primitiveField = (PrimitiveField) field;
					// declaration
					writer.write("\tprivate " + primitiveField.getType().getJavaname() + " "  );
					if(primitiveField.getDefValue() != null && primitiveField.getDefValue() != "" )
						writer.write(  primitiveField.getName() + " = " + String.format( primitiveField.getType().getDefFormat(), primitiveField.getDefValue() ) );
					else
						writer.write(  primitiveField.getName() + " = " + primitiveField.getType().getDefValue() );
					writer.write( ";\n" );
				}
				else if( field instanceof EnumField)
				{
					EnumField enumField = (EnumField) field;
					// enum variables
					writer.write("\tprivate " + enumField.getEnumType().getSimpleClassName() + " " + enumField.getName() + " = " 
							+ enumField.getEnumType().getSimpleClassName() + "." + enumField.getDefValue() + ";\n" );
				}
			// entity fields
			for(EntityField entityfield : entity.getEntityFields())
			{
				if(entityfield.getType().isSecondMany())
					writer.write("\n\tprivate java.util.Set<" + entityfield.getEntity().getSimpleClassName() + "> " + entityfield.getName() + "s = new java.util.TreeSet<>();");
				else
					writer.write("\n\tprivate " + entityfield.getEntity().getSimpleClassName() + " " + entityfield.getName() + ";");
			}
	
			// default constructor
			writer.write("\n\n\tpublic " + entity.getSimpleClassName() + "()\n\t{\n\t}\n\n");
			
//			// full constructor
//			if( entity.getFields().size() > 1 )
//			{
//				writer.write("\tpublic " + entity.getSimpleClassName() + "( ");
//				boolean first = true;
//				for(PrimitiveField primitiveField : entity.getFields())
//				{
//					if(!first)
//						writer.write(", ");
//					else
//						first = false;
//					writer.write( primitiveField.getType().getJavaname() + " " + primitiveField.getName());
//				}
//				writer.write(" )\n\t{\n");
//				for(PrimitiveField primitiveField : entity.getFields())
//					writer.write("\t\tthis." + primitiveField.getName() + " = " + primitiveField.getName() + ";\n");
//				writer.write("\t}\n\n");
//			}

			// for Id:			
			if(metadata.isUsingAnnotations())
				writer.write("\n\t@Id\n\t@GeneratedValue\n\t@Column(name=\"" + entity.getObjectName() + "_id\")");
			writer.write("\n\t@Override\n\tpublic Integer getId()\n\t{\n\t\treturn id;\n\t}\n" );
			writer.write("\n\t@Override\n\tpublic void setId( Integer id )\n\t{\n\t\tthis.id = id;\n\t}\n\n");

			for(Field field : entity.getFields())
				if( field instanceof PrimitiveField)
				{
					PrimitiveField primitiveField = (PrimitiveField) field;
					// annotations
					if(metadata.isUsingAnnotations())
						writer.write("\n\t@Column(name=\"" + primitiveField.getName() + "\")");
					// getter
					writer.write("\n\tpublic " + primitiveField.getType().getJavaname() + " " + getGetterName(primitiveField) 
						+ "()\n\t{\n\t\treturn " + primitiveField.getName() + ";\n\t}\n" );
				
					// setter
					writer.write("\n\tpublic void " + getSetterName(primitiveField) + "( " + primitiveField.getType().getJavaname() + " " 
							+ primitiveField.getName() + " )\n\t{\n\t\tthis." + primitiveField.getName() + " = " + primitiveField.getName() + ";\n\t}\n\n" );
				}
				else if( field instanceof EnumField )
				{
					EnumField enumField = (EnumField) field;
					// annotations
					if(metadata.isUsingAnnotations())
						writer.write("\n\t@Column(name=\"" + enumField.getName() + "\")\n\t@Enumerated(EnumType.ORDINAL)");
					// getter
					writer.write("\n\tpublic " + enumField.getEnumType().getSimpleClassName() + " " + getGetterName(enumField) 
							+ "()\n\t{\n\t\treturn " + enumField.getName() + ";\n\t}\n" );
				
					// setter
					writer.write("\n\tpublic void " + getSetterName(enumField) + "( " + enumField.getEnumType().getSimpleClassName() + " " 
							+ enumField.getName() + " )\n\t{\n\t\tthis." + enumField.getName() + " = " + enumField.getName() + ";\n\t}\n\n" );
				}
			// for each entityField:
			for(EntityField entityField : entity.getEntityFields())
			{
				//Annotations
				if(metadata.isUsingAnnotations())
				{
					switch (entityField.getType())
					{
					case ONETOONE:
						writer.write("\t@OneToOne( fetch=FetchType.EAGER, cascade = CascadeType.ALL) \n\t@JoinColumn( name=\"" + entityField.getName() + "_id\" )\n" );
						break;
					case ONETOMANY:
						writer.write("\t@OneToMany( fetch=FetchType.EAGER, cascade = CascadeType.ALL, mappedBy=\"" + entityField.getCounterName() + "\" )\n");
						break;
					case MANYTOONE:
						writer.write("\t@ManyToOne( fetch=FetchType.EAGER,  cascade = CascadeType.ALL) \n\t@JoinColumn( name=\"" + entityField.getName() + "_id\" )\n" );						
						break;
					case MANYTOMANY:
						if(entityField.getName().compareTo(entityField.getCounterName()) < 0 )
							writer.write("\t@ManyToMany( fetch = FetchType.EAGER, cascade = CascadeType.ALL )\n\t@JoinTable( name = \"" + SQLCreator.getManyToManyTableName(entityField) +  "\",  "
								+ "\n\t\tjoinColumns = { @JoinColumn(name = \"" + entityField.getCounterName() + "_id\", nullable = false, updatable = false ) },"
								+ "\n\t\tinverseJoinColumns = { @JoinColumn(name = \"" + entityField.getName() + "_id\", nullable = false, updatable = false ) } )\n");
						else
							writer.write("\t@ManyToMany( fetch = FetchType.EAGER, mappedBy = \"" + entityField.getCounterName() + "s\" )\n");							
						break;
					}
				}
				// for Lists
				if(entityField.getType().isSecondMany())
				{
					// getter
					writer.write("\tpublic java.util.Set<" + entityField.getEntity().getSimpleClassName() + "> " + getGetterName(entityField)	+ "()\n\t{\n\t\treturn " + entityField.getName() + "s;\n\t}\n" );
				
					// setter
					writer.write("\n\tpublic void " + getSetterName(entityField) 
					+ "( java.util.Set<" + entityField.getEntity().getSimpleClassName() + "> " + entityField.getName() 
					+ "s )\n\t{\n\t\tthis." + entityField.getName() + "s = " + entityField.getName() + "s;\n\t}\n\n" );
				}
				// Singles
				else
				{
					// getter
					writer.write("\tpublic " + entityField.getEntity().getSimpleClassName() + " " + getGetterName(entityField) 
								+ "()\n\t{\n\t\treturn " + entityField.getName() + ";\n\t}\n" );
					
					// setter
					writer.write("\n\tpublic void " + getSetterName(entityField) + "( " + entityField.getEntity().getSimpleClassName() 
							+ " " 	+ entityField.getName() + " )\n\t{\n\t\tthis." + entityField.getName() + " = " 
							+ entityField.getName() + ";\n");
					writer.write("\t}\n\n" );
				}
			}
			
			// Comparable.compareto
			writer.write("\t@Override\n\tpublic int compareTo(" + entity.getSimpleClassName() + " that)\n\t{\n"
					+ "\t\treturn Integer.compare( this.id, that.id );\n"
					+ "\t}\n\n");
			
			// toString
			String toString = "\"" + entity.getToString() + "\"";
			for(Field field : entity.getFields() )
				toString = toString.replaceAll("\\%" + field.getName(), "\" + " + field.getName() + " + \"");	
			for(EntityField entityField : entity.getEntityFields() )
				toString = toString.replaceAll("\\%" + entityField.getName(), "\" + String.valueOf(" + entityField.getName() + ") + \"");			
			toString = toString.replaceAll("\\\"\\\" \\+ ", "").replaceAll(" \\+ \\\"\\\"", "");
			writer.write("\t@Override\n\tpublic String toString()\n\t{\n\t\treturn " + toString + ";\n\t}\n\n");
			
			// equals
			writer.write("\t@Override\n\tpublic boolean equals( Object that)\n\t{\n\t\tif(!(that instanceof " + entity.getSimpleClassName() + "))\n"
					+ "\t\t\treturn false;\n\t\treturn this.id == ((" + entity.getSimpleClassName() + ")that).id;\n"
					+ "\t}\n\n");
			
			// fin
			writer.write("}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
	}
	
	/*
	 * create Enum
	 */
	public static void create(EnumType enumType, MetaData metadata)
	{
		String fullpath = metadata.getSrcpath() + metadata.getModelpackage().replaceAll("\\.", "/") + "/" + enumType.getSimpleClassName() + ".java";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\n * " + enumType.getSimpleClassName() + ".java\n * generated by rose\n */\n\n");
			
			// package declaration
			writer.write("package " + metadata.getModelpackage() + ";\n\n");
			
			// class declaration
			writer.write("\npublic enum " + enumType.getSimpleClassName() + " implements bn.blaszczyk.roseapp.model.Entity\n{");
			
			// options variables
			boolean first = true;
			int count = 1;
			for(String option : enumType)
			{
				if(first)
					first = false;
				else
					writer.write( "," );
				writer.write("\n\t" + option + "(" + count++ + ")" );
			}
			
			writer.write(";\n\n\tprivate int id;\n\n\tprivate " + enumType.getSimpleClassName() + "(int id)\n\t{\n\t\tthis.id = id;\n\t}\n\n"
					+ "\t@Override\n\tpublic Integer getId()\n\t{\n\t\treturn id;\n\t}\n\n"
					+ "\t@Override\n\tpublic void setId(Integer id)\n\t{\n\t}");
			// fin
			writer.write("\n}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
	}
	
	
	
}
