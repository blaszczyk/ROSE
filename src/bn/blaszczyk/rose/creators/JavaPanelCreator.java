package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import bn.blaszczyk.rose.*;
import bn.blaszczyk.rose.model.*;


public class JavaPanelCreator {

	public static void create(Entity entity, MetaData metadata, boolean simple)
	{
		String classname = String.format( simple ? metadata.getSimplepanelformat() : metadata.getFullpanelformat(), entity.getClassname() );
		String fullpath = metadata.getSrcpath() + metadata.getPanelpackage().replaceAll("\\.", "/") + "/" + classname + ".java";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\n * " + classname + ".java\n * generated by rose\n */\n\n");
			
			// package declaration
			writer.write("package " + metadata.getPanelpackage() + ";\n\n");
			
			// imports
			writer.write("import " + metadata.getModelpackage() + ".*;\n");
			writer.write("import javax.swing.*;\n");
			for(String importpackage : entity.getImports())
				if(importpackage != null)
					writer.write("import " + importpackage + ";\n");
			
			// class declaration
			writer.write("\npublic class " + classname + " extends JPanel\n{\n");
			
			// viewn object
			writer.write("\tprivate final " + entity.getClassname() + " " + entity.getJavaname() + ";\n");
			
			// member variables
			for(Member member : entity.getMembers())
			{
				// declaration
				writer.write("\tprivate final JLabel " + getLabelName(member) + " = new JLabel(\"" + member.getCapitalName() + "\");\n" );
				writer.write("\tprivate final JLabel " + getValueLabelName(member) + " = new JLabel( );\n" );
			}
			
			// entitymember variables
//			for(EntityMember entitymember : entity.getEntityMembers())
//			{
//				if(entitymember.isMany())
//					writer.write("\n\tprivate Set<" + entitymember.getEntity().getClassname() + "> " + entitymember.getName() + "s = new HashSet<>();\n");
//				else
//					writer.write("\n\tprivate " + entitymember.getEntity().getClassname() + " " + entitymember.getName() + ";\n");
//			}
	
			// default constructor
			writer.write("\n\n\tpublic " + classname + "( " + entity.getClassname() + " " + entity.getJavaname() + " )\n\t{\n");
			writer.write("\t\tthis." + entity.getJavaname() + " = " + entity.getJavaname() + ";\n");
			int count = 0;
			for(Member member : entity.getMembers())
			{
				writer.write("\t\tsetLayout(null);\n");
				writer.write("\t\t" + getValueLabelName(member) + ".setText( " + entity.getJavaname() + ".get" + member.getCapitalName() +"().toString() );\n" );
				writer.write("\t\t" + getLabelName(member) + ".setBounds( " + metadata.getLabelspacing() + ", " 
						+ ( (count + 1) * metadata.getLabelspacing() + count * metadata.getLabelheigth() ) + ", "
						+ metadata.getLabelwidth() + ", " + metadata.getLabelheigth() + " );\n");
				writer.write("\t\t" + getValueLabelName(member) + ".setBounds( " + ( 2 * metadata.getLabelspacing() + metadata.getLabelwidth() )+ ", " 
						+ ( (count + 1) * metadata.getLabelspacing() + count * metadata.getLabelheigth() ) + ", "
						+ metadata.getLabelwidth() + ", " + metadata.getLabelheigth() + " );\n");
				writer.write("\t\tadd( " + getLabelName(member) + " );\n\t\tadd( " + getValueLabelName(member) + " );\n" );
				count ++;
			}
			writer.write("\t}\n\n");

			// TODO: all
			
			// fin
			writer.write("}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
	}
	
	private static String getLabelName(Member member)
	{
		return "lbl" + member.getCapitalName();
	}
	
	private static String getValueLabelName(Member member)
	{
		return "lblval" + member.getCapitalName();
	}
	
}
