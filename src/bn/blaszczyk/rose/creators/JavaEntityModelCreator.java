package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import bn.blaszczyk.rose.*;
import bn.blaszczyk.rose.model.*;


public class JavaEntityModelCreator {

	public static void createModel(Entity entity, MetaData metadata)
	{
		String classname = String.format( metadata.getEntitymodelformat() , entity.getClassname() );
		String fullpath = metadata.getSrcpath() + metadata.getEntitymodelpackage().replaceAll("\\.", "/") + "/" + classname + ".java";
		File file = new File(fullpath);
		int count = 0;
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\n * " + classname + ".java\n * generated by rose\n */\n\n");
			
			// package declaration
			writer.write("package " + metadata.getEntitymodelpackage() + ";\n\n");
			
			// imports
			writer.write("import " + metadata.getModelpackage() + ".*;\n");
			writer.write("import bn.blaszczyk.rose.interfaces.*;\n");
			
			// class declaration
			writer.write("\npublic class " + classname + " implements EntityModel\n{\n");
			
			// represented object
			writer.write("\tprivate final " + entity.getClassname() + " " + entity.getJavaname() + ";\n");

			// default constructor
			writer.write("\n\n\tpublic " + classname + "( " + entity.getClassname() + " " + entity.getJavaname() + " )\n\t{\n");
			writer.write("\t\tthis." + entity.getJavaname() + " = " + entity.getJavaname() + ";\n");
			writer.write("\t}\n\n");
			
			// implement EntityModel methods

			// public String getName();
			writer.write("\t@Override\n\tpublic String getName()\n\t{\n\t\treturn \"" + entity.getClassname() + "\";\n\t}\n\n");
			
			// public int getId();
			writer.write("\t@Override\n\tpublic int getId()\n\t{\n\t\treturn " + entity.getJavaname() + ".get" + entity.getPrimary().getCapitalName() + "();\n\t}\n\n");
			
			// public int getMemberCount();
			writer.write("\t@Override\n\tpublic int getMemberCount()\n\t{\n\t\treturn " + entity.getMembers().size() + ";\n\t}\n\n");
			
			// public String getMemberName( int index );
			writer.write("\t@Override\n\tpublic String getMemberName(int index)\n\t{\n\t\tswitch(index)\n\t\t{\n");
			count = 0;
			for(Member member : entity.getMembers())
				writer.write("\t\tcase " + count++ + ":\n\t\t\treturn \"" + member.getCapitalName() +  "\";\n" );
			writer.write("\t\t}\n\t\treturn \"\";\n\t}\n\n");
			
			// public Object getMemberValue( int index );
			writer.write("\t@Override\n\tpublic Object getMemberValue(int index)\n\t{\n\t\tswitch(index)\n\t\t{\n");
			count = 0;
			for(Member member : entity.getMembers())
				writer.write("\t\tcase " + count++ + ":\n\t\t\treturn " + entity.getJavaname() + ".get" + member.getCapitalName() +  "();\n" );
			writer.write("\t\t}\n\t\treturn null;\n\t}\n\n");
			
			// public int getEntityCount();
			writer.write("\t@Override\n\tpublic int getEntityCount()\n\t{\n\t\treturn " + entity.getEntityMembers().size() + ";\n\t}\n\n");
			
			// public Object getEntityMember( int index );
			writer.write("\t@Override\n\tpublic Object getEntityMember(int index)\n\t{\n\t\tswitch(index)\n\t\t{\n");
			count = 0;
			for(EntityMember entityMember : entity.getEntityMembers())
				writer.write("\t\tcase " + count++ + ":\n\t\t\treturn " + entity.getJavaname() + ".get" + entityMember.getCapitalName() 
							+ ( entityMember.isMany() ? "s" : "" ) +  "();\n" );
			writer.write("\t\t}\n\t\treturn null;\n\t}\n\n");
			
			// public String getEntityName( int index );
			writer.write("\t@Override\n\tpublic String getEntityName(int index)\n\t{\n\t\tswitch(index)\n\t\t{\n");
			count = 0;
			for(EntityMember entityMember : entity.getEntityMembers())
				writer.write("\t\tcase " + count++ + ":\n\t\t\treturn \"" + entityMember.getCapitalName() + ( entityMember.isMany() ? "s" : "" ) +  "\";\n" );
			writer.write("\t\t}\n\t\treturn \"\";\n\t}\n\n");
			
			// public boolean isEntityMany( int index );			
			writer.write("\t@Override\n\tpublic boolean isEntityMany(int index)\n\t{\n\t\tswitch(index)\n\t\t{\n");
			count = 0;
			for(EntityMember entityMember : entity.getEntityMembers())
				writer.write("\t\tcase " + count++ + ":\n\t\t\treturn " + entityMember.isMany() + ";\n" );
			writer.write("\t\t}\n\t\treturn false;\n\t}\n\n");

			// public EntityModel createModel( Object object);
			writer.write("\t@Override\n\tpublic EntityModel createModel( Object object )\n\t{\n\t\treturn " 
						+ metadata.getEntitymodelfactoryclass() + ".createModel( object );\n\t}\n\n");
			
			// fin
			writer.write("}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
	}
	
	public static void createFactory( List<Entity> entities, MetaData metadata )
	{
	
		String fullpath = metadata.getSrcpath() + metadata.getEntitymodelpackage().replaceAll("\\.", "/") + "/" + metadata.getEntitymodelfactoryclass() + ".java";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			// initial comment
			writer.write("/*\n * " + metadata.getEntitymodelfactoryclass() + ".java\n * generated by rose\n */\n\n");
		
			// package declaration
			writer.write("package " + metadata.getEntitymodelpackage() + ";\n\n");
		
			// imports
			writer.write("import " + metadata.getModelpackage() + ".*;\n"
						+ "import bn.blaszczyk.rose.interfaces.*;\n" );
		
			// class declaration
			writer.write("\npublic class " + metadata.getEntitymodelfactoryclass() + "\n{\n");

			// createBasicPanel
			writer.write("\n\tpublic static EntityModel createModel( Object object )\n\t{\n\t\t");
			for(Entity entity : entities)
				writer.write("if( object instanceof " + entity.getClassname() +" )\n\t\t\treturn new " 
							+ String.format( metadata.getEntitymodelformat(), entity.getClassname() ) +  "( ( " + entity.getClassname() + " ) object );\n\t\telse " );
			writer.write("\n\t\t\treturn null;\n\t}\n" );
		
			writer.write("}\n");
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
}


}
