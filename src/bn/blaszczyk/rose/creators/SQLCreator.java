package bn.blaszczyk.rose.creators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.List;

import bn.blaszczyk.rose.MetaData;
import bn.blaszczyk.rose.model.Entity;
import bn.blaszczyk.rose.model.EntityMember;
import bn.blaszczyk.rose.model.Member;

public class SQLCreator {
	
	public static void create(List<Entity> entities, MetaData metadata)
	{
		String fullpath = metadata.getSqlpath() + "createtables.sql";
		File file = new File(fullpath);
		if(!file.getParentFile().exists())
			file.getParentFile().mkdirs();
		try(FileWriter writer = new FileWriter(file))
		{
			writer.write("--createtables.sql\n--generated by rose\n\n");
			
			if(metadata.getDatabase() != null)
				writer.write("use " + metadata.getDatabase() +"\ngo\n\n" );
	
			for(int i = entities.size() - 1; i >= 0; i-- )
				writer.write("if exists (select count(*) from " + entities.get(i).getClassname() + ")\n\tdelete table " + entities.get(i).getClassname() + ";\ngo\n\n");

			for(Entity entity : entities)
				createTable(entity, metadata, writer);
			System.out.println( "File created: " + fullpath);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	
	private static void createTable(Entity entity, MetaData metadata, Writer writer) throws IOException
	{
		// create table
		writer.write( "create table " + entity.getClassname() + "\n(\n" );
		
		// member columns
		for(Member member : entity.getMembers())
		{
			writer.write( "\t" + member.getName() + " " + member.getSqltype());
			if(member.isPrimary())
				writer.write( " auto_increment");
			writer.write(",\n");
		}
		
		// relational columns
		for(EntityMember entityMember : entity.getEntityMembers())
			if(!entityMember.isMany())
				writer.write( "\t" + entityMember.getName() + " " 
							+ entityMember.getEntity().getPrimary().getSqltype() + ",\n" );
		
		// primary key
		writer.write( "\tconstraint pk_" + entity.getClassname().toLowerCase() + " primary key ( " );
		boolean first = true;
		for(Member member : entity.getMembers())
			if(member.isPrimary())
			{
				if(first)
					first = false;
				else
					writer.write(", ");
				writer.write( member.getName() );
			}
		writer.write(" )");
		
		//foreign keys
		if(metadata.isUsingForeignKeys())
			for(EntityMember entityMember : entity.getEntityMembers())
				if(!entityMember.isMany())
					writer.write( ",\n\tconstraint fk_" + entity.getClassname().toLowerCase() + "_" + entityMember.getEntity().getClassname().toLowerCase()
								+ " foreign key ( " + entityMember.getName() + " ) references "
								+ entityMember.getEntity().getClassname() + "( " + entityMember.getEntity().getPrimary().getName() + " )");
		//fin
		writer.write( "\n);\ngo\n\n" );
	}
}


